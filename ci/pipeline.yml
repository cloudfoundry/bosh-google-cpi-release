---
groups:
  - name: bosh-google-cpi-release
    jobs:
      - test-unit
      - build-candidate
      - setup-infrastructure
      - deploy-ubuntu
      - run-bats
      - run-int
      - teardown-infrastructure
      - promote-candidate-major
      - promote-candidate-minor
      - promote-candidate-patch
      - bump-golang-packages
      - bump-deps
  - name: docker-ci-image
    jobs:
      - build-dockerfile

jobs:
  - name: test-unit
    plan:
      - in_parallel:
        - {trigger: true, get: bosh-cpi-src, resource: bosh-cpi-src-in}
        - {get: ci}
      - task: unit-tests
        file: ci/ci/tasks/unit-tests.yml

  - name: build-candidate
    serial: true
    plan:
      - in_parallel:
        - {trigger: true, passed: [test-unit], get: bosh-cpi-src,   resource: bosh-cpi-src-in}
        - {trigger: false,                     get: version-semver, params: {bump: patch}}
        - {get: ci}
      - put: version-semver
        params: {file: version-semver/number}

      - task: build-release
        file: ci/ci/tasks/build-candidate.yml

      - put: bosh-cpi-dev-artifacts
        params: {file: candidate/*.tgz}

      - put: bosh-cpi-dev-artifacts-sha1
        params: {file: candidate/*.tgz.sha1}

  - name: setup-infrastructure
    serial_groups: [integration]
    plan:
      - in_parallel:
        - {trigger: true, passed: [build-candidate], get: bosh-cpi-src, resource: bosh-cpi-src-in}
        - {trigger: true,                            get: stemcell, resource: google-ubuntu-stemcell}
        - {get: ci}
      - in_parallel: &teardown_step
        - task: teardown-infrastructure
          file: ci/ci/tasks/teardown-infrastructure.yml
          params:
            google_auto_network: ((google_auto_network))
            google_json_key_data: ((gcp_credentials_json))
            google_network: ((google_network))
            google_project: ((google_project))
            google_region: ((google_region))
            google_zone: ((google_zone))
      - put: infrastructure
        params:
          env_name: ((cpi_source_branch))-bosh-google-cpi
          terraform_source: ci/ci/test_infrastructure
          delete_on_failure: true
      # delete VM created for regional backend service hack
      - in_parallel: *teardown_step

  - name: teardown-infrastructure
    serial_groups: [integration]
    plan:
      - in_parallel:
        - {trigger: true,  passed: [run-bats, run-int],   get: bosh-cpi-src, resource: bosh-cpi-src-in}
        - {trigger: false, passed: [run-bats],            get: bosh-cpi-release, resource: bosh-cpi-dev-artifacts}
        - {trigger: false, passed: [run-bats],            get: director-creds, resource: director-creds}
        - {trigger: false, passed: [deploy-ubuntu],       get: director-state, resource: director-state}
        - {trigger: true , passed: [run-bats, run-int],   get: infrastructure, resource: infrastructure}
        - {trigger: false, passed: [run-bats, run-int],   get: stemcell, resource: google-ubuntu-stemcell}
        - {trigger: false,                                get: bosh-cli}
        - {trigger: false,                                get: bosh-deployment}
        - {get: ci}
      - in_parallel: *teardown_step
      - task: setup-deployment
        file: ci/ci/tasks/setup-deployment.yml
      - task: teardown-director
        file: ci/ci/tasks/teardown-director.yml
        params:
          google_project:                 ((google_project))
          google_region:                  ((google_region))
          google_zone:                    ((google_zone))
          cpi_source_branch:              ((cpi_source_branch))
          google_test_bucket_name:        ((google_test_bucket_name))
          google_subnetwork_range:        ((google_subnetwork_range))
          google_subnetwork_gw:           ((google_subnetwork_gw))
          google_address_static_director: ((google_address_static_director))
          google_json_key_data:           ((gcp_credentials_json))
          private_key_user:               ((private_key_user))
          private_key_data:               ((private_key_data))
      - put: infrastructure
        params:
          env_name: ((cpi_source_branch))-bosh-google-cpi
          terraform_source: ci/ci/test_infrastructure
          action: destroy
        get_params:
          terraform_source: ci/ci/test_infrastructure
          action: destroy

  - name: deploy-ubuntu
    serial_groups: [integration]
    plan:
      - in_parallel:
        - {trigger: true, passed: [build-candidate, setup-infrastructure],  get: bosh-cpi-src, resource: bosh-cpi-src-in}
        - {trigger: true, passed: [build-candidate],                        get: bosh-cpi-release, resource: bosh-cpi-dev-artifacts}
        - {trigger: true, passed: [setup-infrastructure],                   get: infrastructure, resource: infrastructure}
        - {trigger: true, passed: [setup-infrastructure],                   get: stemcell, resource: google-ubuntu-stemcell}
        - {trigger: false,                                                  get: bosh-cli}
        - {trigger: false,                                                  get: bosh-deployment}
        - {get: ci}
      - task: setup-deployment
        file: ci/ci/tasks/setup-deployment.yml
      - task: setup-director
        file: ci/ci/tasks/setup-director.yml
        params:
          cpi_source_branch:              ((cpi_source_branch))
          google_project:                 ((google_project))
          google_region:                  ((google_region))
          google_zone:                    ((google_zone))
          google_test_bucket_name:        ((google_test_bucket_name))
          google_subnetwork_range:        ((google_subnetwork_range))
          google_subnetwork_gw:           ((google_subnetwork_gw))
          google_address_static_director: ((google_address_static_director))
          google_json_key_data:           ((gcp_credentials_json))
          private_key_user:               ((private_key_user))
          private_key_data:               ((private_key_data))
        on_failure:
          task: teardown-director
          file: ci/ci/tasks/teardown-director.yml
          params:
            google_project:                 ((google_project))
            google_region:                  ((google_region))
            google_zone:                    ((google_zone))
            cpi_source_branch:              ((cpi_source_branch))
            google_test_bucket_name:        ((google_test_bucket_name))
            google_subnetwork_range:        ((google_subnetwork_range))
            google_subnetwork_gw:           ((google_subnetwork_gw))
            google_address_static_director: ((google_address_static_director))
            google_json_key_data:           ((gcp_credentials_json))
            private_key_user:               ((private_key_user))
            private_key_data:               ((private_key_data))
      - put: director-creds
        params: {file: director-creds/((cpi_source_branch))-creds.yml}
      - put: director-state
        params: {file: director-state/((cpi_source_branch))-manifest-state.json}

  - name: run-bats
    serial: true
    serial_groups: [integration]
    plan:
      - in_parallel:
        - {trigger: true, passed: [build-candidate, deploy-ubuntu], get: bosh-cpi-src, resource: bosh-cpi-src-in}
        - {trigger: true, passed: [build-candidate, deploy-ubuntu], get: bosh-cpi-release, resource: bosh-cpi-dev-artifacts}
        - {trigger: true, passed: [deploy-ubuntu],                  get: stemcell, resource: google-ubuntu-stemcell}
        - {trigger: true, passed: [deploy-ubuntu],                  get: director-creds, resource: director-creds}
        - {trigger: true, passed: [deploy-ubuntu],                  get: infrastructure, resource: infrastructure}
        - {trigger: false,                                          get: bats}
        - {get: ci}
      - task: run-bats
        file: ci/ci/tasks/run-bats.yml
        params:
          cpi_source_branch:                          ((cpi_source_branch))
          google_subnetwork_range:                    ((google_subnetwork_range))
          google_subnetwork_gw:                       ((google_subnetwork_gw))
          google_address_static_available_range_bats: ((google_address_static_bats_available_range))
          google_address_static_bats:                 ((google_address_static_bats))
          google_address_static_pair_bats:            ((google_address_static_pair_bats))
          google_json_key_data:                       ((gcp_credentials_json))
          base_os:                                    Ubuntu
          stemcell_name:                              bosh-google-kvm-ubuntu-bionic-go_agent
          private_key_data:                           ((private_key_data))

  - name: run-int
    serial_groups: [integration]
    plan:
      - in_parallel:
        - {trigger: true, passed: [build-candidate, deploy-ubuntu],        get: bosh-cpi-src, resource: bosh-cpi-src-in}
        - {trigger: true, passed: [deploy-ubuntu],                         get: stemcell, resource: google-ubuntu-stemcell}
        - {trigger: true, passed: [deploy-ubuntu],                         get: infrastructure, resource: infrastructure}
        - {get: ci}
      - task: run-int
        file: ci/ci/tasks/run-int.yml
        params:
          google_json_key_data:      ((gcp_credentials_json))
          google_address_static_int: ((google_address_static_int))

  - name: promote-candidate-major
    serial: true
    plan:
      - in_parallel:
        - {trigger: false, passed: [run-int,run-bats], get: bosh-cpi-src,           resource: bosh-cpi-src-in}
        - {trigger: false, passed: [run-int,run-bats], get: stemcell,               resource: google-ubuntu-stemcell}
        - {trigger: false, passed: [run-bats],         get: bosh-cpi-release,       resource: bosh-cpi-dev-artifacts}
        - {trigger: false,                             get: release-version-semver, params: {bump: major}}
        - {get: ci}
      - task: promote
        file: ci/ci/tasks/promote-candidate.yml
        params:
          release_blobs_json_key: ((gcp_credentials_json))

      - put: release-version-semver
        params: {file: release-version-semver/number}

      - put: bosh-cpi-src-out
        params: {repository: promoted/repo, rebase: true, tag_prefix: "v", tag: promoted/semver_version}

  - name: promote-candidate-minor
    serial: true
    plan:
      - in_parallel:
        - {trigger: false, passed: [run-int,run-bats], get: bosh-cpi-src,           resource: bosh-cpi-src-in}
        - {get: ci}
        - {trigger: false, passed: [run-int,run-bats], get: stemcell,               resource: google-ubuntu-stemcell}
        - {trigger: false, passed: [run-bats],         get: bosh-cpi-release,       resource: bosh-cpi-dev-artifacts}
        - {trigger: false,                             get: release-version-semver, params: {bump: minor}}
      - task: promote
        file: ci/ci/tasks/promote-candidate.yml
        params:
          release_blobs_json_key: ((gcp_credentials_json))

      - put: release-version-semver
        params: {file: release-version-semver/number}

      - put: bosh-cpi-src-out
        params: {repository: promoted/repo, rebase: true, tag_prefix: "v", tag: promoted/semver_version}

  - name: promote-candidate-patch
    serial: true
    plan:
      - in_parallel:
        - {trigger: false, passed: [run-int,run-bats], get: bosh-cpi-src,           resource: bosh-cpi-src-in}
        - {get: ci}
        - {trigger: false, passed: [run-int,run-bats], get: stemcell,               resource: google-ubuntu-stemcell}
        - {trigger: false, passed: [run-bats],         get: bosh-cpi-release,       resource: bosh-cpi-dev-artifacts}
        - {trigger: false,                             get: release-version-semver, params: {bump: patch}}
      - task: promote
        file: ci/ci/tasks/promote-candidate.yml
        params:
          release_blobs_json_key: ((gcp_credentials_json))

      - put: release-version-semver
        params: {file: release-version-semver/number}

      - put: bosh-cpi-src-out
        params: {repository: promoted/repo, rebase: true, tag_prefix: "v", tag: promoted/semver_version}

  - name: build-dockerfile
    public: true
    serial: true
    plan:
      - get: bosh-cpi-src-dockerfiles
        trigger: true
      - get: weekly
        trigger: true
      - put: google-cpi-image
        params:
          build: "bosh-cpi-src-dockerfiles/ci/docker/bosh-google-cpi-boshrelease"
        get_params:
          skip_download: true

  - name: bump-deps
    plan:
    - in_parallel:
      - get: bosh-cpi-src-in
      - get: golang-release
      - get: ci
      - get: weekly
        trigger: true
    - task: bump-deps
      file: golang-release/ci/tasks/shared/bump-deps.yml
      input_mapping:
        input_repo: bosh-cpi-src-in
      output_mapping:
        output_repo: bosh-cpi-src-out
      params:
        SOURCE_PATH: src/bosh-google-cpi
    - task: unit-tests
      file: ci/ci/tasks/unit-tests.yml
      input_mapping:
        bosh-cpi-src: bosh-cpi-src-out
    - put: bosh-cpi-src-out
      params:
        repository: bosh-cpi-src-out
        rebase: true

  - name: bump-golang-packages
    plan:
    - in_parallel:
      - get: bosh-cpi-src-in
      - get: golang-release
        trigger: true
    - task: bump-golang-packages
      file: golang-release/ci/tasks/shared/bump-golang-package.yml
      input_mapping:
        input_repo: bosh-cpi-src-in
      output_mapping:
        output_repo: bosh-cpi-src-out
      params:
        PACKAGES: [golang-1-linux, golang-1-darwin]
        PRIVATE_YML: |
          blobstore:
              options:
                credentials_source: static
                json_key: '((gcp_credentials_json))'
    - put: bosh-cpi-src-out
      params:
        repository: bosh-cpi-src-out
        rebase: true

resources:
  - name: weekly
    type: time
    source:
      start: 3:00 -0700
      stop: 4:30 -0700
      days: [ Saturday ]

  - name: bats
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-acceptance-tests.git
      branch: master

  - name: bosh-cli
    type: s3
    source:
      regexp: bosh-cli-([0-9.]+)-linux-amd64
      bucket: bosh-cli-artifacts
      region_name: us-east-1

  - name: bosh-cpi-dev-artifacts
    type: gcs-resource
    source:
      json_key: ((gcp_credentials_json))
      bucket:   ((google_releases_bucket_name))
      regexp:   bosh-google-cpi-([0-9]+\.[0-9]+\.[0-9]+)\.tgz

  - name: bosh-cpi-dev-artifacts-sha1
    type: gcs-resource
    source:
      json_key: ((gcp_credentials_json))
      bucket:   ((google_releases_bucket_name))
      regexp:   bosh-google-cpi-([0-9]+\.[0-9]+\.[0-9]+)\.tgz.sha1

  - name: bosh-cpi-src-in
    type: git
    source:
      branch: ((cpi_source_branch))
      ignore_paths:
        - .final_builds/**/*.yml
        - releases/**/*.yml
        - ci/*
      uri: https://github.com/cloudfoundry/bosh-google-cpi-release.git

  - name: bosh-cpi-src-dockerfiles
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-google-cpi-release.git
      branch: ((cpi_source_branch))
      paths:
      - "ci/docker"

  - name: bosh-cpi-src-out
    type: git
    source:
      uri: git@github.com:cloudfoundry/bosh-google-cpi-release.git
      branch: ((cpi_source_branch))
      private_key: ((github_deployment_key_bosh_google_cpi_release))

  - name: golang-release
    type: git
    source:
      uri: https://github.com/bosh-packages/golang-release.git

  - name: bosh-deployment
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-deployment.git
      branch: master

  - name: ci
    type: git
    source:
      branch: ((cpi_source_branch))
      paths:
        - ci/*
      uri: https://github.com/cloudfoundry/bosh-google-cpi-release.git

  - name: director-creds
    type: gcs-resource
    source:
      json_key:         ((gcp_credentials_json))
      bucket:           ((google_state_bucket_name))
      versioned_file:   ((cpi_source_branch))-creds.yml

  - name: director-state
    type: gcs-resource
    source:
      json_key:         ((gcp_credentials_json))
      bucket:           ((google_state_bucket_name))
      versioned_file:   ((cpi_source_branch))-manifest-state.json

  - name: google-ubuntu-stemcell
    type: bosh-io-stemcell
    source:
      name: bosh-google-kvm-ubuntu-bionic-go_agent
      force_regular: true
      tarball: true

  - name: infrastructure
    type: terraform
    source:
      backend_type: gcs
      backend_config:
        bucket: ((google_state_bucket_name))
        prefix: terraform-((cpi_source_branch))
        credentials: ((gcp_credentials_json))
      vars:
        google_project:           ((google_project))
        google_region:            ((google_region))
        google_zone:              ((google_zone))
        google_json_key_data:     ((gcp_credentials_json))
        google_subnetwork_range:  ((google_subnetwork_range))
        google_firewall_internal: ((google_firewall_internal))
        google_firewall_external: ((google_firewall_external))
        prefix:                   ((cpi_source_branch))
        google_auto_network:      ((google_auto_network))
        google_network:           ((google_network))

  - name: release-version-semver
    type: semver
    source:
      driver: gcs
      json_key:          ((gcp_credentials_json))
      key:               release-current-version
      bucket:            ((version_semver_bucket_name))

  - name: version-semver
    type: semver
    source:
      driver: gcs
      json_key:          ((gcp_credentials_json))
      key:               current-version
      bucket:            ((version_semver_bucket_name))

  - name: google-cpi-image
    type: docker-image
    source:
      repository: boshcpi/gce-cpi-release
      email: cf-bosh-eng@pivotal.io
      username: ((docker.username))
      password: ((docker.password))

resource_types:
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.12.29
